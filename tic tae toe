import 'package:flutter/material.dart';
import 'package:tictactoe/homepage1.dart';

void main(List<String> args) {
  runApp(MaterialApp(
    title: " tic tac toe",
    debugShowCheckedModeBanner: false,
    home: homepage1(),
  ));
}     


// new page
import 'package:flutter/material.dart';

class homepage1 extends StatefulWidget {
  const homepage1({super.key});

  @override
  State<homepage1> createState() => _homepage1State();
}

class _homepage1State extends State<homepage1> {
  // to add icon Image
  var cross = Icon(
    Icons.cancel,
    size: 100,
  );
  var circle = Icon(
    Icons.circle,
    size: 100,
  );
  var edit = Icon(
    Icons.edit,
    size: 100,
  );

  // initialize Box with empty Vaue
  bool isCross = true;
  late String message;
  late List<String> gameState;

  // Initialize Box with empty value
  @override
  void initState() {
    gameState = List.filled(9, "empty");

    this.message = "";
    super.initState();
  }

  // to play game
  playGame(int index) {
    if (this.gameState[index] == "empty") {
      setState(() {
        if (this.isCross) {
          this.gameState[index] = "cross";
        } else {
          this.gameState[index] = "circle";
        }
        isCross = !isCross;
        checkwin();
      });
    }
  }

// reset game
  resetGame() {
    setState(() {
      gameState = List.filled(9, "empty");
      this.message = '';
    });
  }

  // to get Icon Image
  Icon getIcon(String title) {
    switch (title) {
      case ('empty'):
        return edit;

      case ('cross'):
        return cross;
        break;

      case ('circle'):
        return circle;

      default:
        return Icon(Icons.error);
    }
  }

  // to check for winning

  checkwin() {
    if ((gameState[0] != "empty") &&
        (gameState[0] == gameState[1]) &&
        (gameState[1] == gameState[2])) {
      setState(() {
        this.message = this.gameState[0] + 'win';
      });
    } else if ((gameState[3] != "empty") &&
        (gameState[3] == gameState[4]) &&
        (gameState[4] == gameState[5])) {
      setState(() {
        this.message = this.gameState[3] + 'win';
      });
    } else if ((gameState[6] != "empty") &&
        (gameState[6] == gameState[7]) &&
        (gameState[7] == gameState[8])) {
      setState(() {
        this.message = this.gameState[6] + 'win';
      });
    } else if ((gameState[0] != "empty") &&
        (gameState[0] == gameState[3]) &&
        (gameState[3] == gameState[6])) {
      setState(() {
        this.message = this.gameState[0] + 'win';
      });
    } else if ((gameState[1] != "empty") &&
        (gameState[1] == gameState[4]) &&
        (gameState[4] == gameState[7])) {
      setState(() {
        this.message = this.gameState[1] + 'win';
      });
    } else if ((gameState[2] != "empty") &&
        (gameState[2] == gameState[5]) &&
        (gameState[5] == gameState[8])) {
      setState(() {
        this.message = this.gameState[2] + 'win';
      });
    } else if ((gameState[0] != "empty") &&
        (gameState[0] == gameState[4]) &&
        (gameState[4] == gameState[8])) {
      setState(() {
        this.message = this.gameState[6] + 'win';
      });
    } else if ((gameState[2] != "empty") &&
        (gameState[2] == gameState[4]) &&
        (gameState[4] == gameState[6])) {
      setState(() {
        this.message = this.gameState[2] + 'win';
      });
    } else if (!gameState.contains('"empty')) {
      setState(() {
        message = "game Draw";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tic Tae Toe'),
      ),
      body: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Expanded(
                child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                childAspectRatio: 1.0,
                crossAxisSpacing: 10,
                mainAxisSpacing: 10,
              ),
              itemCount: gameState.length,
              itemBuilder: (context, i) => SizedBox(
                  width: 100,
                  height: 100,
                  child: MaterialButton(
                    onPressed: () {
                      this.playGame(i);
                    },
                    child: getIcon(this.gameState[i]),
                  )),
            )),
            Text(
              message,
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 30),
            ),
            Container(
              child: MaterialButton(
                color: Colors.blue[800],
                minWidth: 300,
                height: 50,
                onPressed: resetGame,
                child: Text(
                  "Reset Game",
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ),
            SizedBox(
              height: 50,
            ),
            Text("flutter with sabin"),
          ]),
    );
  }
}
